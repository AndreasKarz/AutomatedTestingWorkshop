// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomatedTestingWorkshop.GherkinSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GherkinSamplesFeature : Xunit.IClassFixture<GherkinSamplesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GherkinSample.feature"
#line hidden
        
        public GherkinSamplesFeature(GherkinSamplesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Gherkin samples", "\tIn order to \r\n\t\tget an example of all the possibilities \r\n\tAs a \r\n\t\ttester\r\n\tI w" +
                    "ant to \r\n\t\tsee the possibilities in action", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
 testRunner.Given("I open the test page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Show tops for women")]
        [Xunit.TraitAttribute("FeatureTitle", "Gherkin samples")]
        [Xunit.TraitAttribute("Description", "Show tops for women")]
        public virtual void ShowTopsForWomen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show tops for women", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 14
  testRunner.And("I have click on the Tab WOMEN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("I click on the category Tops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("I see two items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Test the search function")]
        [Xunit.TraitAttribute("FeatureTitle", "Gherkin samples")]
        [Xunit.TraitAttribute("Description", "Test the search function")]
        [Xunit.InlineDataAttribute("shoe", "7", new string[0])]
        [Xunit.InlineDataAttribute("funky", "0", new string[0])]
        public virtual void TestTheSearchFunction(string therm, string count, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test the search function", null, exampleTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 20
  testRunner.And("Im on the Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When(string.Format("I search for {0}", therm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then(string.Format("I will recieve {0} results", count), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check the tabs")]
        [Xunit.TraitAttribute("FeatureTitle", "Gherkin samples")]
        [Xunit.TraitAttribute("Description", "Check the tabs")]
        public virtual void CheckTheTabs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the tabs", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tab",
                        "Label"});
            table1.AddRow(new string[] {
                        "1",
                        "WOMEN"});
            table1.AddRow(new string[] {
                        "2",
                        "DRESSES"});
            table1.AddRow(new string[] {
                        "3",
                        "T-SHIRTS"});
            table1.AddRow(new string[] {
                        "4",
                        "Belts"});
#line 30
 testRunner.Then("I see all my tabs", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Test only for Firefox")]
        [Xunit.TraitAttribute("FeatureTitle", "Gherkin samples")]
        [Xunit.TraitAttribute("Description", "Test only for Firefox")]
        [Xunit.TraitAttribute("Category", "browser")]
        [Xunit.TraitAttribute("Category", "Firefox")]
        public virtual void TestOnlyForFirefox()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test only for Firefox", null, new string[] {
                        "browser",
                        "Firefox"});
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Test only for Internet Explorer")]
        [Xunit.TraitAttribute("FeatureTitle", "Gherkin samples")]
        [Xunit.TraitAttribute("Description", "Test only for Internet Explorer")]
        [Xunit.TraitAttribute("Category", "browser")]
        [Xunit.TraitAttribute("Category", "IE")]
        public virtual void TestOnlyForInternetExplorer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test only for Internet Explorer", null, new string[] {
                        "browser",
                        "IE"});
#line 42
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Test only for Edge")]
        [Xunit.TraitAttribute("FeatureTitle", "Gherkin samples")]
        [Xunit.TraitAttribute("Description", "Test only for Edge")]
        [Xunit.TraitAttribute("Category", "browser")]
        [Xunit.TraitAttribute("Category", "Edge")]
        public virtual void TestOnlyForEdge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test only for Edge", null, new string[] {
                        "browser",
                        "Edge"});
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Test only for Chrome")]
        [Xunit.TraitAttribute("FeatureTitle", "Gherkin samples")]
        [Xunit.TraitAttribute("Description", "Test only for Chrome")]
        [Xunit.TraitAttribute("Category", "browser")]
        [Xunit.TraitAttribute("Category", "Chrome")]
        public virtual void TestOnlyForChrome()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test only for Chrome", null, new string[] {
                        "browser",
                        "Chrome"});
#line 50
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GherkinSamplesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GherkinSamplesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
